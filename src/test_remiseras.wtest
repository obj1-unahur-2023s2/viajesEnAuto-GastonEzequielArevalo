import remiseras.*
import clientas.*

describe "test de roxana"{
	
	test "test de pesos por 10 km de ludmila" {

		assert.equals(180, roxana.precioViaje(ludmila, 10))
	}
	
	test "test de pesos por 10 km de anaMaria" {

		assert.equals(300, roxana.precioViaje(anaMaria, 10))
	}
	
	test "anaMaria no esta economicamene estable"{
		anaMaria.cambiarEstadoEconomico()
		assert.equals(250, roxana.precioViaje(anaMaria, 10))
	}
	
	test "test de pesos por 10 km de teresa" {
		
		assert.equals(220, roxana.precioViaje(teresa, 10))
	}
	
	test "test de pesos por 2 km de ludmila" {

		assert.equals(36, roxana.precioViaje(ludmila, 2))
	}
	
	test "test de pesos por 2 km de anaMaria" {

		assert.equals(60, roxana.precioViaje(anaMaria, 2))
	}
	
	test "test de pesos por 2 km de teresa" {
		
		assert.equals(44, roxana.precioViaje(teresa, 2))
	}
}

describe "test de Gabriela"{
	
	test "test de pesos por 10 km de ludmila" {

		assert.equals(216, gabriela.precioViaje(ludmila, 10))
	}
	
	test "test de pesos por 10 km de anaMaria" {

		assert.equals(360, gabriela.precioViaje(anaMaria, 10))
		
	}
	
	test "anaMaria no esta economicamene estable"{
		anaMaria.cambiarEstadoEconomico()
		assert.equals(300, gabriela.precioViaje(anaMaria, 10))
	}
	
	
	test "test de pesos por 10 km de teresa" {
		
		assert.equals(264, gabriela.precioViaje(teresa, 10))
	}
	
	test "test de pesos por 2 km de ludmila" {

		assert.equals(43.20, gabriela.precioViaje(ludmila, 2))
	}
	
	test "test de pesos por 2 km de anaMaria" {

		assert.equals(72, gabriela.precioViaje(anaMaria, 2))
	}
	
	
	test "test de pesos por 2 km de teresa" {
		
		assert.equals(52.80, gabriela.precioViaje(teresa, 2))
	}
}


describe "test de Mariela"{
	
	test "test de pesos por 10 km de ludmila" {

		assert.equals(180, mariela.precioViaje(ludmila, 10))
	}
	
	test "test de pesos por 10 km de anaMaria" {

		assert.equals(300, mariela.precioViaje(anaMaria, 10))
	}
	
	test "test de pesos por 10 km de teresa" {
		
		assert.equals(220, mariela.precioViaje(teresa, 10))
	}
	
	test "test de pesos por 2 km de ludmila" {

		assert.equals(50, mariela.precioViaje(ludmila, 2))
	}
	
	test "test de pesos por 2 km de anaMaria" {

		assert.equals(60, mariela.precioViaje(anaMaria, 2))
	}
	
	test "test de pesos por 3 km de teresa" {
		
		assert.equals(50, mariela.precioViaje(teresa, 2))
	}
}

describe "test de Juana"{
	
	test "test de pesos por 10 km de ludmila" {

		assert.equals(200, juana.precioViaje(ludmila, 10))
	}
	
	test "test de pesos por 10 km de anaMaria" {

		assert.equals(200, juana.precioViaje(anaMaria, 10))
	}
	
	test "test de pesos por 10 km de teresa" {
		
		assert.equals(200, juana.precioViaje(teresa, 10))
	}
	
	test "test de pesos por 2 km de ludmila" {

		assert.equals(100, juana.precioViaje(ludmila, 2))
	}
	
	test "test de pesos por 2 km de anaMaria" {

		assert.equals(100, juana.precioViaje(anaMaria, 2))
	}
	
	test "test de pesos por 2 km de teresa" {
		
		assert.equals(100, juana.precioViaje(teresa, 2))
	}
}

describe "test de lucia"{
	
	test "No se puede reemplazar a si misma"{
		assert.throwsExceptionWithMessage(
			"No se puede reemplazar a si mismo", 
			{lucia.estaReemplazando(lucia)}
		)
	}
	
	test "Se puede reemplazar a si misma"{
		assert.doesNotThrowException(
			{lucia.estaReemplazando(roxana)}
		)
	}
	
	test "Reemplazo de roxana"{
		lucia.estaReemplazando(roxana)
		assert.equals(180,lucia.precioViaje(ludmila,10))
	}
	
	
}

